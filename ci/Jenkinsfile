pipeline {
  agent any
  options {
    timestamps()
    timeout(time: 60, unit: 'MINUTES')
  }

  environment {
    SEVERITY   = "HIGH,CRITICAL"
    IMAGE_NAME = "demo-app"
    IMAGE_TAG  = "dev"
    DOCKERFILE = "DemoApp.Dockerfile"
  }

  stages {

    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Docker availability') {
      steps {
        sh '''#!/usr/bin/env bash
          set -Eeuo pipefail
          command -v docker
          docker version
          echo "✅ Docker reachable"
        '''
      }
    }

    stage('Build image') {
      steps {
        sh '''#!/usr/bin/env bash
          set -Eeuo pipefail
          echo "Building ${IMAGE_NAME}:${IMAGE_TAG}"
          docker build --pull -f "${DOCKERFILE}" -t "${IMAGE_NAME}:${IMAGE_TAG}" .
          mkdir -p reports
        '''
      }
    }

    stage('Scan & Generate Report') {
      steps {
        // 1) Trivy (dockerized) → raw JSON (non-fatal if it finds vulns)
        sh '''#!/usr/bin/env bash
          set -Eeuo pipefail
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$WORKSPACE":/work -w /work \
            aquasec/trivy:0.52.2 image \
              --timeout 40m \
              --format json \
              --db-repository public.ecr.aws/aquasecurity/trivy-db:2 \
              --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db:1 \
              --quiet \
              "${IMAGE_NAME}:${IMAGE_TAG}" > "reports/${IMAGE_NAME}.json" || true
        '''

        // 2) Python wrappers (inside container) → filtered JSON + HTML
        //    Auto-detect the folder that actually contains scanner/scan.py
        sh '''#!/usr/bin/env bash
          set -Eeuo pipefail
          docker run --rm \
            -e IMAGE_NAME="${IMAGE_NAME}" \
            -e IMAGE_TAG="${IMAGE_TAG}" \
            -v "$WORKSPACE":/work -w /work \
            python:3.11-slim bash -lc '
              set -Eeuo pipefail
              python -V
              [ -f requirements.txt ] && pip install --no-cache-dir -r requirements.txt || true

              shopt -s globstar nullglob
              APPDIR="/work"
              if [ ! -f "/work/scanner/scan.py" ]; then
                CAND=(/work/**/scanner/scan.py)
                if [ ${#CAND[@]} -gt 0 ]; then
                  APPDIR="$(dirname "$(dirname "${CAND[0]}")")"
                else
                  echo "ERROR: scanner/scan.py not found anywhere under /work"; exit 2
                fi
              fi
              echo "Using APPDIR: $APPDIR"
              cd "$APPDIR"

              mkdir -p reports
              python scanner/scan.py   "${IMAGE_NAME}:${IMAGE_TAG}" "reports/${IMAGE_NAME}.json"
              python scanner/report.py "reports/${IMAGE_NAME}.filtered.json" "reports/${IMAGE_NAME}.html"
              ls -al reports
            '
        '''
      }
    }

    stage('Email summary + Gate (Gmail)') {
      steps {
        withCredentials([
          string(credentialsId: 'GMAIL_USER',         variable: 'GMAIL_USER'),
          string(credentialsId: 'GMAIL_APP_PASSWORD', variable: 'GMAIL_APP_PASSWORD'),
          string(credentialsId: 'EMAIL_TO',           variable: 'EMAIL_TO')
        ]) {
          sh '''#!/usr/bin/env bash
            set -Eeuo pipefail
            docker run --rm \
              -e IMAGE_NAME="${IMAGE_NAME}" \
              -e IMAGE_TAG="${IMAGE_TAG}" \
              -e SEVERITY="${SEVERITY}" \
              -e GMAIL_USER -e GMAIL_APP_PASSWORD -e EMAIL_TO \
              -v "$WORKSPACE":/work -w /work \
              python:3.11-slim bash -lc "
                set -Eeuo pipefail
                [ -f requirements.txt ] && pip install --no-cache-dir -r requirements.txt || true

                shopt -s globstar nullglob
                APPDIR=/work
                if [ ! -f /work/scanner/notify_email.py ]; then
                  CAND=(/work/**/scanner/notify_email.py)
                  if [ \${#CAND[@]} -gt 0 ]; then
                    APPDIR=\\\"\\$(dirname \\\"\\$(dirname \\\"\\${CAND[0]}\\\" )\\\")\\\"
                  else
                    echo \\"ERROR: scanner/notify_email.py not found anywhere under /work\\"; exit 2
                  fi
                fi
                echo \\"Using APPDIR: $APPDIR\\"
                cd $APPDIR

                python scanner/notify_email.py \\
                  --image       \\\"${IMAGE_NAME}:${IMAGE_TAG}\\\" \\
                  --report-json \\\"reports/${IMAGE_NAME}.filtered.json\\\" \\
                  --report-html \\\"reports/${IMAGE_NAME}.html\\\" \\
                  --fail-on     \\\"${SEVERITY}\\\"
              "
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'reports/*', onlyIfSuccessful: false
    }
  }
}
