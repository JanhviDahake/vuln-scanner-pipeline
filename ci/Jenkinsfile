pipeline {
  agent any
  options { timestamps() }

  parameters {
    string(name: 'IMAGE_NAME', defaultValue: 'myapp', description: 'Docker image name to build & scan')
    string(name: 'DOCKERFILE', defaultValue: 'DemoApp.Dockerfile', description: 'Dockerfile to build (e.g., DemoApp.Dockerfile or Dockerfile)')
    string(name: 'SEVERITY',   defaultValue: 'HIGH,CRITICAL', description: 'Fail gate on these severities (comma-separated)')
  }

  environment {
    PYTHONUNBUFFERED = '1'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build Docker image') {
      steps {
        sh '''
          docker build -f "${DOCKERFILE}" -t "${IMAGE_NAME}:${BUILD_NUMBER}" .
        '''
      }
    }

    stage('Scan & Generate Report') {
      steps {
        sh '''
          mkdir -p reports
          docker run --rm \
            -v "$PWD":/app -w /app \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /usr/bin/docker:/usr/bin/docker \
            python:3.11-slim bash -lc "
              pip install --no-cache-dir -r requirements.txt &&
              python scanner/scan.py \\"${IMAGE_NAME}:${BUILD_NUMBER}\\" \\"reports/${IMAGE_NAME}.json\\" &&
              python scanner/report.py \\"reports/${IMAGE_NAME}.filtered.json\\" \\"reports/${IMAGE_NAME}.html\\"
            "
        '''
      }
    }

    stage('Email & Gate (Gmail)') {
      steps {
        withCredentials([
          string(credentialsId: 'GMAIL_USER',         variable: 'GMAIL_USER'),
          string(credentialsId: 'GMAIL_APP_PASSWORD', variable: 'GMAIL_APP_PASSWORD'),
          string(credentialsId: 'EMAIL_TO',           variable: 'EMAIL_TO')
        ]) {
          sh '''
            docker run --rm \
              -v "$PWD":/app -w /app \
              -e GMAIL_USER -e GMAIL_APP_PASSWORD -e EMAIL_TO \
              python:3.11-slim bash -lc "
                pip install --no-cache-dir -r requirements.txt &&
                python scanner/notify_email.py \
                  --image       \\"${IMAGE_NAME}:${BUILD_NUMBER}\\" \
                  --report-json \\"reports/${IMAGE_NAME}.filtered.json\\" \
                  --report-html \\"reports/${IMAGE_NAME}.html\\" \
                  --fail-on     \\"${SEVERITY}\\"
              "
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'reports/*', onlyIfSuccessful: false
    }
  }
}
