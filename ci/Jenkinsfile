pipeline {
  agent any

  options {
    timestamps()
    timeout(time: 60, unit: 'MINUTES')
  }

  environment {
    // Image to build & scan
    IMAGE_REPO = "demo-app"
    IMAGE_TAG  = "dev"
    SEVERITY   = "HIGH,CRITICAL"

    // Name of the Docker volume you used when starting Jenkins:
    //   docker run ... -v jenkins_home2:/var/jenkins_home ...
    JENKINS_VOL = "jenkins_home2"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Docker availability') {
      steps {
        sh '''#!/usr/bin/env bash
          set -e
          which docker
          docker version
          echo "âœ… Docker reachable"
        '''
      }
    }

    stage('Build image') {
      steps {
        sh '''#!/usr/bin/env bash
          set -e
          echo "Building ${IMAGE_REPO}:${IMAGE_TAG}"
          docker build -t ${IMAGE_REPO}:${IMAGE_TAG} .
          mkdir -p reports
        '''
      }
    }

    stage('Scan (Trivy) -> raw JSON') {
      steps {
        sh '''#!/usr/bin/env bash
          set -e
          # Run Trivy inside its container; mount Jenkins volume and work from the job's workspace
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${JENKINS_VOL}:/var/jenkins_home" \
            -w "${WORKSPACE}" \
            aquasec/trivy:latest image \
              --severity "${SEVERITY}" \
              --format json \
              "${IMAGE_REPO}:${IMAGE_TAG}" \
            > "reports/${IMAGE_REPO}.json"

          ls -lh reports || true
        '''
        archiveArtifacts artifacts: 'reports/*.json', fingerprint: true
      }
    }

    stage('Generate filtered JSON + HTML') {
      steps {
        sh '''#!/usr/bin/env bash
          set -e
          # Run Python inside its container; mount the same Jenkins volume and work from the job's workspace
          docker run --rm \
            -v "${JENKINS_VOL}:/var/jenkins_home" \
            -w "${WORKSPACE}" \
            python:3.11-slim bash -lc "
              set -e
              python -V
              [ -f requirements.txt ] && pip install --no-cache-dir -r requirements.txt || true
              export PYTHONPATH=.

              # If your repo expects to generate filtered JSON + HTML from the Trivy JSON:
              if [ ! -f scanner/report.py ]; then
                echo 'ERROR: scanner/report.py not found in $PWD'; ls -la; exit 2
              fi

              mkdir -p reports
              # Adjust the arguments below to match your scripts:
              # If your scanner/report.py consumes the raw Trivy JSON and writes filtered+HTML:
              python scanner/report.py \\"reports/${IMAGE_REPO}.json\\" \\"reports/${IMAGE_REPO}.html\\"
              # If you also produce a filtered JSON, add that line (uncomment if applicable):
              # python scanner/scan.py   \\"${IMAGE_REPO}:${IMAGE_TAG}\\" \\"reports/${IMAGE_REPO}.json\\"
              # python scanner/report.py \\"reports/${IMAGE_REPO}.filtered.json\\" \\"reports/${IMAGE_REPO}.html\\"

              ls -lh reports
            "
        '''
        archiveArtifacts artifacts: 'reports/*.html, reports/*.json', fingerprint: true, allowEmptyArchive: true
      }
    }

    // Optional: Email/Slack gate (only runs if you add credentials and want alerts)
    // stage('Email summary + Gate (Gmail)') {
    //   steps {
    //     withCredentials([
    //       string(credentialsId: 'GMAIL_USER',         variable: 'GMAIL_USER'),
    //       string(credentialsId: 'GMAIL_APP_PASSWORD', variable: 'GMAIL_APP_PASSWORD'),
    //       string(credentialsId: 'EMAIL_TO',           variable: 'EMAIL_TO')
    //     ]) {
    //       sh '''#!/usr/bin/env bash
    //         set -e
    //         docker run --rm \
    //           -e IMAGE_NAME="${IMAGE_REPO}:${IMAGE_TAG}" \
    //           -e SEVERITY="${SEVERITY}" \
    //           -e GMAIL_USER -e GMAIL_APP_PASSWORD -e EMAIL_TO \
    //           -v "${JENKINS_VOL}:/var/jenkins_home" \
    //           -w "${WORKSPACE}" \
    //           python:3.11-slim bash -lc "
    //             set -e
    //             [ -f requirements.txt ] && pip install --no-cache-dir -r requirements.txt || true
    //             export PYTHONPATH=.
    //             if [ ! -f scanner/notify_email.py ]; then
    //               echo 'ERROR: scanner/notify_email.py not found in $PWD'; ls -la; exit 2
    //             fi
    //             python scanner/notify_email.py \\
    //               --image       \\"${IMAGE_REPO}:${IMAGE_TAG}\\" \\
    //               --report-json \\"reports/${IMAGE_REPO}.json\\" \\
    //               --report-html \\"reports/${IMAGE_REPO}.html\\" \\
    //               --fail-on     \\"${SEVERITY}\\"
    //           "
    //       '''
    //     }
    //   }
    // }
  }

  post {
    always {
      archiveArtifacts artifacts: 'reports/**', fingerprint: true, onlyIfSuccessful: false, allowEmptyArchive: true
    }
  }
}
