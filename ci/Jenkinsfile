pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
    skipDefaultCheckout(false)           // we'll use the workspace directly
    timeout(time: 60, unit: 'MINUTES')
  }

  parameters {
    string(name: 'IMAGE_NAME', defaultValue: 'myapp',              description: 'Docker image name to build & scan')
    string(name: 'DOCKERFILE', defaultValue: 'DemoApp.Dockerfile', description: 'Dockerfile path in repo')
    string(name: 'SEVERITY',   defaultValue: 'HIGH,CRITICAL',      description: 'Fail gate on these severities')
    string(name: 'REPO_URL',   defaultValue: 'https://github.com/jay7848/vuln-scanner-pipeline.git', description: 'Git repo URL (not used for build when workspace present)')
    string(name: 'REPO_REF',   defaultValue: 'main',               description: 'Branch / ref (informational)')
  }

  environment {
    DOCKER_BUILDKIT = '0'   // allow legacy builder
  }

  stages {

    stage('Docker availability') {
      steps {
        sh '''
          set -e
          if ! command -v docker >/dev/null 2>&1; then
            echo "ERROR: docker CLI not found in Jenkins container (exit 127)."
            echo "Install Docker CLI (see README) or re-run Jenkins with /usr/bin/docker bind-mounted."
            exit 127
          fi
          docker version
          echo "âœ… Docker reachable"
        '''
      }
    }

    stage('Build image from workspace') {
      steps {
        sh """
          set -e
          echo "Building ${params.IMAGE_NAME}:${BUILD_NUMBER} from workspace at ${env.WORKSPACE}"
          DOCKER_BUILDKIT=${DOCKER_BUILDKIT} docker build --pull \
            -f "${params.DOCKERFILE}" \
            -t "${params.IMAGE_NAME}:${BUILD_NUMBER}" \
            "${env.WORKSPACE}"

          docker images --format 'table {{.Repository}}\\t{{.Tag}}\\t{{.ID}}\\t{{.CreatedSince}}\\t{{.Size}}' | grep -E '^${params.IMAGE_NAME}\\s+${BUILD_NUMBER}\\b'
        """
      }
    }

    stage('Warm Trivy DB cache (optional)') {
      steps {
        sh '''
          set -e
          echo "Pre-pulling Trivy DB images (safe to skip on failure)..."
          docker pull ghcr.io/aquasecurity/trivy-db:2 || true
          docker pull ghcr.io/aquasecurity/trivy-java-db:1 || true
        '''
      }
    }

    stage('Scan & Generate Report') {
      steps {
        sh """
          set -e
          # Run scanner in a Python container against the workspace (no git clone)
          docker run --rm -v "\$PWD":/app -w /app python:3.11-slim sh -lc '
            set -eu
            python -V
            pip install --no-cache-dir -r requirements.txt
            mkdir -p reports
            python -m scanner.scan   "${params.IMAGE_NAME}:${BUILD_NUMBER}" "reports/${params.IMAGE_NAME}.json"
            python -m scanner.report "reports/${params.IMAGE_NAME}.filtered.json" "reports/${params.IMAGE_NAME}.html"
          '
          ls -la reports || true
        """
      }
    }

    stage('Email Gate (send & enforce threshold)') {
      steps {
        sh """
          set -e
          if [ -f .env ]; then
            echo "Using .env for email settings"
          else
            echo "WARNING: .env not found. Email may fail if vars are missing."
          fi

          docker run --rm -v "\$PWD":/app -w /app python:3.11-slim sh -lc '
            set -eu
            pip install --no-cache-dir -r requirements.txt
            python -m scanner.notify_email \
              --image       "${params.IMAGE_NAME}:${BUILD_NUMBER}" \
              --report-json "reports/${params.IMAGE_NAME}.filtered.json" \
              --report-html "reports/${params.IMAGE_NAME}.html" \
              --fail-on     "${params.SEVERITY}"
          '
        """
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'reports/*', onlyIfSuccessful: false
    }

    success {
      // Slack via webhook from .env (optional)
      sh '''set -e
        SLACK_WEBHOOK=""
        if [ -f .env ]; then
          SLACK_WEBHOOK=$(awk -F= \'/^SLACK_WEBHOOK=/{sub(/^SLACK_WEBHOOK=/,""); print}\' .env)
        fi
        if [ -n "${SLACK_WEBHOOK:-}" ]; then
          docker run --rm curlimages/curl:8.10.1 \
            -sS -X POST -H 'Content-type: application/json' \
            --data "{\\"text\\": \\"âœ… *${JOB_NAME}* #${BUILD_NUMBER} succeeded. <${BUILD_URL}|Open build>. Report: <${BUILD_URL}artifact/reports/${IMAGE_NAME}.html|HTML>\\"}" \
            "$SLACK_WEBHOOK" || true
        else
          echo "No SLACK_WEBHOOK configured; skipping Slack notification."
        fi
      '''
    }

    failure {
      sh '''set -e
        SLACK_WEBHOOK=""
        if [ -f .env ]; then
          SLACK_WEBHOOK=$(awk -F= \'/^SLACK_WEBHOOK=/{sub(/^SLACK_WEBHOOK=/,""); print}\' .env)
        fi
        if [ -n "${SLACK_WEBHOOK:-}" ]; then
          docker run --rm curlimages/curl:8.10.1 \
            -sS -X POST -H 'Content-type: application/json' \
            --data "{\\"text\\": \\"ðŸš¨ *${JOB_NAME}* #${BUILD_NUMBER} FAILED. <${BUILD_URL}|Open build>.\\"}" \
            "$SLACK_WEBHOOK" || true
        else
          echo "No SLACK_WEBHOOK configured; skipping Slack notification."
        fi
      '''
    }
  }
}
