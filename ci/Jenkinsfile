pipeline {
  agent any

  environment {
    // Point to Docker Desktop on Windows/macOS with TCP daemon enabled:
    DOCKER_HOST = 'tcp://host.docker.internal:2375'
    IMAGE_NAME  = 'demo-app:jenkins'
    TRIVY_TAG   = '0.53.0'   // pin for repeatability
    SEVERITY    = 'HIGH,CRITICAL'
    REPORT_DIR  = 'reports'
  }

  options {
    // If your Jenkins supports it, this switches sh to bash globally.
    // If not, every sh block below has a bash shebang anyway.
    shell('/bin/bash')
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Sanity: Docker TCP') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail
        echo "Using DOCKER_HOST=${DOCKER_HOST}"
        docker -H "${DOCKER_HOST}" version >/dev/null
        echo "✅ Docker reachable"
        '''
      }
    }

    stage('Build image') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail
        docker -H "${DOCKER_HOST}" build -f DemoApp.Dockerfile -t "${IMAGE_NAME}" .
        docker -H "${DOCKER_HOST}" image ls "${IMAGE_NAME}"
        mkdir -p "${REPORT_DIR}"
        '''
      }
    }

    stage('Scan with Trivy') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail

        # Run Trivy in a container, talking to your remote Docker daemon via DOCKER_HOST.
        docker -H "${DOCKER_HOST}" run --rm \
          -e DOCKER_HOST="${DOCKER_HOST}" \
          -v "$PWD/${REPORT_DIR}:/reports" \
          "aquasec/trivy:${TRIVY_TAG}" \
          image --severity "${SEVERITY}" --format json \
          -o "/reports/${IMAGE_NAME//[:]/_}.trivy.json" \
          "${IMAGE_NAME}"

        # Optional: pretty HTML from JSON using the repo script if present.
        if [[ -f scripts/report_html.py ]]; then
          python3 scripts/report_html.py \
            "/reports/${IMAGE_NAME//[:]/_}.trivy.json" \
            "/reports/${IMAGE_NAME//[:]/_}.html"
        else
          # minimal HTML wrapper if converter script not found
          jq -r '.' "/reports/${IMAGE_NAME//[:]/_}.trivy.json" \
            | python3 - <<'PY'
import sys, json, html
data=json.load(sys.stdin)
print("<html><body><h1>Trivy Report</h1><pre>"+html.escape(json.dumps(data, indent=2))+"</pre></body></html>")
PY
          mv "/reports/${IMAGE_NAME//[:]/_}.trivy.json" "/reports/${IMAGE_NAME//[:]/_}.json"
          mv "./index.html" "/reports/${IMAGE_NAME//[:]/_}.html" 2>/dev/null || true
        fi
        '''
      }
    }

    stage('Gate on severity') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail
        J="/reports/${IMAGE_NAME//[:]/_}.trivy.json"
        # Count HIGH+CRITICAL findings (ignore UNKNOWN/LOW/MEDIUM)
        COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' "$J" || echo 0)
        echo "Found $COUNT HIGH/CRITICAL vulnerabilities"
        if (( COUNT > 0 )); then
          echo "❌ Failing the build due to HIGH/CRITICAL findings"
          exit 1
        fi
        echo "✅ Gate passed (no HIGH/CRITICAL)"
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'reports/*', fingerprint: true, allowEmptyArchive: true
    }
    failure {
      echo 'Build failed. Check the Trivy report in the artifacts.'
    }
  }
}
