pipeline {
  agent any
  options { timestamps() }

  parameters {
    string(name: 'IMAGE_NAME', defaultValue: 'myapp', description: 'Docker image name to build & scan')
    string(name: 'DOCKERFILE', defaultValue: 'DemoApp.Dockerfile', description: 'Dockerfile path in repo')
    string(name: 'SEVERITY',   defaultValue: 'HIGH,CRITICAL', description: 'Fail gate on these severities')
    string(name: 'REPO_URL',   defaultValue: '', description: 'Git repo URL (blank = autodetect)')
    string(name: 'REPO_REF',   defaultValue: '', description: 'Git ref/branch (blank = autodetect)')
  }

  environment {
    PYTHONUNBUFFERED = '1'
    DOCKER_BUILDKIT  = '1'
    // Docker Desktop / remote daemon over TCP
    DOCKER_HOST      = 'tcp://host.docker.internal:2375'
    REPORT_DIR       = 'reports'
    TRIVY_TAG        = '0.53.0'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Sanity: Docker TCP') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail
        echo "Using DOCKER_HOST=$DOCKER_HOST"
        docker -H "$DOCKER_HOST" version >/dev/null
        echo "✅ Docker reachable"
        '''
      }
    }

    stage('Resolve repo (autodetect if blanks)') {
      steps {
        script {
          if (!params.REPO_URL?.trim()) {
            env.REPO_URL = sh(returnStdout: true, script: "git -C '${env.WORKSPACE}' config --get remote.origin.url").trim()
          } else {
            env.REPO_URL = params.REPO_URL.trim()
          }
          if (!params.REPO_REF?.trim()) {
            def ref = sh(returnStdout: true, script: "git -C '${env.WORKSPACE}' rev-parse --abbrev-ref HEAD || echo main").trim()
            env.REPO_REF = ref ?: 'main'
          } else {
            env.REPO_REF = params.REPO_REF.trim()
          }
          echo "Using REPO_URL=${env.REPO_URL}, REPO_REF=${env.REPO_REF}"
        }
      }
    }

    stage('Build image from Git (no mounts)') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail
        mkdir -p "${REPORT_DIR}"
        echo "Building ${IMAGE_NAME}:${BUILD_NUMBER} from ${REPO_URL}#${REPO_REF}"
        DOCKER_BUILDKIT=0 docker -H "$DOCKER_HOST" build \
          --pull \
          -f "${DOCKERFILE}" \
          -t "${IMAGE_NAME}:${BUILD_NUMBER}" \
          "${REPO_URL}#${REPO_REF}"
        docker -H "$DOCKER_HOST" image ls "${IMAGE_NAME}"
        '''
      }
    }

    stage('Scan & Generate Report (no mounts)') {
      steps {
        sh '''#!/usr/bin/env bash
        set -Eeuo pipefail
        mkdir -p "${REPORT_DIR}"

        # 1) Scan with Trivy (in container), output JSON into ./reports
        OUT_BASE="${IMAGE_NAME//[:]/_}_${BUILD_NUMBER}"
        OUT_JSON="${OUT_BASE}.json"
        docker -H "$DOCKER_HOST" run --rm \
          -e DOCKER_HOST="$DOCKER_HOST" \
          -v "$PWD/${REPORT_DIR}:/reports" \
          "aquasec/trivy:${TRIVY_TAG}" \
          image --severity "${SEVERITY}" --format json \
          -o "/reports/${OUT_JSON}" \
          "${IMAGE_NAME}:${BUILD_NUMBER}"

        # 2) Make an HTML snapshot (simple pretty JSON → HTML)
        docker run --rm -v "$PWD/${REPORT_DIR}:/reports" python:3.11 \
          python -c "import json,html,sys; p='/reports/${OUT_JSON}'; d=json.load(open(p)); open('/reports/${OUT_BASE}.html','w').write('<html><body><h1>Trivy Report</h1><pre>'+html.escape(json.dumps(d, indent=2))+'</pre></body></html>')"

        # 3) Back-compat filenames some scripts expect
        cp "${REPORT_DIR}/${OUT_JSON}" "${REPORT_DIR}/${IMAGE_NAME}.filtered.json" || true
        cp "${REPORT_DIR}/${OUT_BASE}.html" "${REPORT_DIR}/${IMAGE_NAME}.html" || true

        echo "Saved: ${REPORT_DIR}/${OUT_JSON}"
        echo "Saved: ${REPORT_DIR}/${OUT_BASE}.html"
        '''
      }
    }

    stage('Email & Gate (no mounts)') {
      steps {
        withCredentials([
          string(credentialsId: 'GMAIL_USER',         variable: 'GMAIL_USER'),
          string(credentialsId: 'GMAIL_APP_PASSWORD', variable: 'GMAIL_APP_PASSWORD'),
          string(credentialsId: 'EMAIL_TO',           variable: 'EMAIL_TO')
        ]) {
          sh '''#!/usr/bin/env bash
          set -Eeuo pipefail
          # Mount the workspace so we can reuse local code & reports
          docker run --rm \
            -e DOCKER_HOST -e GMAIL_USER -e GMAIL_APP_PASSWORD -e EMAIL_TO \
            -e SEVERITY="${SEVERITY}" \
            -v "$PWD:/app" -w /app \
            python:3.11 bash -lc "
              pip install --no-cache-dir -r requirements.txt
              python scanner/notify_email.py \
                --image       '${IMAGE_NAME}:${BUILD_NUMBER}' \
                --report-json 'reports/${IMAGE_NAME}.filtered.json' \
                --report-html 'reports/${IMAGE_NAME}.html' \
                --fail-on     '${SEVERITY}'
            "
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'reports/*', onlyIfSuccessful: false
    }
  }
}
